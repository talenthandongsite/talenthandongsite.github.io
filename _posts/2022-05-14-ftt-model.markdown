---
layout: post
title:  "FTT 가격 모델"
date:   2022-05-14 14:00:00 +0900
categories: kr-projects
---
By Fernando Kim(cocm1324 - [LinkedIn](https://www.linkedin.com/in/cocm1324/), [Github](https://github.com/cocm1324))

<br>

FTT 가격 모델은 FTX 거래소에서 발행한 코인인 [FTT](https://ftx.com/ftt)의 가격을 예측하는 모델이다.  

HGT의 FTT모델은 FTX 거래소가 FTT를 소각하기 위해 사용된 USD와 FTT의 장기적인 가격이 상관관계가 있을것으로 가정하였다. 그러한 가정하에 주별로 FTT소각에 사용된 USD 데이터와 해당되는 주의 FTT 평균 거래 가격 데이터를 가져와 다항 회기 분석을 통해 모델을 만들었다. 또한 모델과 데이터 사이의 괴리를 최소화 하기 위해 [AICc](https://en.wikipedia.org/wiki/Akaike_information_criterion)가 사용되었다. 

FTT 가격 모델은 데이터의 모수가 부족하여 현재로써는 실질적인 가격 예측에 사용될 수 없다. FTT소각은 주당 1건의 데이터가 생성되며, 2019년 8월에 첫 출시가 되었으므로 현재까지 약 150건의 데이터가 생성되었다. 의미 있는 모델이 만들어지기 위해서는 앞으로 10년 이상의 데이터 수집이 필요할 것으로 보인다.

개발적인 측면에서는 Go를 이용한 서버 개발 경험, MongoDB, Github Action 구축에 대한 경험을 할수 있었다. 

특히 기존 Node.js환경과 Jenkins를 사용한 배포에서 Go언어와 Github Action으로의 변경을 통해 배포 단계에서 서버의 부하와 자원 사용이 대폭 감소하여 메모리 사용에서는 98%감소(140mb -> 2mb, Node.js와 다르게 Go는 바이너리로 빌드가 가능했기 때문), 서버 비용은 40% 감소 (1개월 당 약 50000KRW -> 약 30000KRW, Jenkins가 무거운 프로그램이기 때문에 높은 티어의 서버 이미지가 필요했다. Github Action으로 변경 후 적절한 서버 티어로 다운그레이드 함)하였다.

<br>
<br>
<br>

## 배경

<!-- <image src="/assets/images/ftt-model-excel.png" style="max-width: 740px;display: block; margin-left: auto; margin-right: auto"> -->
![execl](/assets/images/ftt-model-excel.png)

<br>

### 비즈니스적인 배경

- FTT 프라이스 모델 엑셀의 특성: 매주 매뉴얼하게 데이터를 추가하고 관리해 줘야함, 하지만 귀찮음
- 현재로써는 데이터 모수가 적어 모델이 큰 의미가 없지만 개발 및 유지의 난이도가 낮아 쉽게 개발하고 장기적으로 데이터를 쌓아 나갈 수 있어 추후 역할이 기대됨

<br>

### 개발적인 배경

- Node.js를 개발언어로 선택 후 서비스의 배포 시간 및 사용되는 자원이 서비스 사이즈에 비해 크게 소모됨 (최종 도커 이미지 기준 약 140mb정도 크기)
- Jenkins를 배포 파이프라인으로 선택 후 서버 컴퓨터의 성능이 크게 요구 됨 (AWS기준 t2.medium정도 되어야 안정적으로 서비스 가능)

<br>
<br>
<br>

## 아키텍처 설계 및 기획
<!-- <image src="/assets/images/ftt-model-arch.png" style="max-width: 740px;display: block; margin-left: auto; margin-right: auto"> -->
![arch](/assets/images/ftt-model-arch.png)

<br>

### 컴포넌트

- 클라이언트: 웹 사이트에 접속했을 때 보이는 화면, 프레임워크 및 라이브러리 없이 기본 HTML/CSS/JS로 구현
- 서버: 데이터를 주기적으로 받아오고 정제, 및 저장 하는 로직을 담당. Go로 구성
- 몽고 아틀라스: 데이터베이스 엔진, BSON형태로 데이터를 저장함, 무료임
- 외부 서비스
    - FTX: FTT의 소각 데이터(사용된 USD, 일시)를 받아오는 소스
    - Coin Market Cap: FTT의 가격 데이터를 받아오는 소스

<br>  

### 프로세스

- 주기적으로 데이터를 가져와 정제하기(보라색)  
    1. 매주 1회 (목요일 새벽, 보통 수요일에 FTT가 소각데이터를 추가함) 서버에서 스케쥴링을 통해 프로세스 시작  
    2. FTX에서 USD소각량 데이터, CMC에서 FTT의 가격 데이터를 HTTP요청을 통해 가져옴  
    3. 가져온 데이터를 데이터베이스의 데이터 형식에 맞춰 변환, 현재까지의 데이터들을 모두 가져와 회귀 분석하여 모델을 만듦  
    4. 데이터베이스에 해당 데이터를 모두 저장함  
- 유저가 브라우저를 통해 FTT모델 페이지를 열람(노란색)  
    1. 유저가 브라우저를 통해 FTT모델 페이지에 접속함, JS 스크립트에서 FTT에 대한 정보를 서버에 요청함  
    2. 해당되는 데이터를 데이터베이스에서 가져옴  
    3. 브라우저는 데이터를 받아서 뷰를 유저에게 보여줌  

<br>
<br>
<br>

## 개발 과정

아키텍처 설계 후 개발을 하는 과정은 다음과 같이 이루어졌다
1. 데이터 소스 찾기
2. 회기 분석 모델 만들기
3. Go 언어 스터디 및 서버 구현
4. 프론트엔드 뷰 구성
5. Github Action을 사용하여 서버에 디플로이

<br> 

### 데이터 소스를 찾기

![raw-data](/assets/images/ftt-raw-data.png)  

가장 먼저 시도한 것은 기존 엑셀의 수식을 분석하여 어떤 정보들을 토대로 모델을 만드는지 파악하는 것이었다. 다음의 정보를 얻어와야 모델을 만들 수 있었다
- 각 소각이 일어난 시간
- 해당 소각에 사용된 USD 예상치
- 해당 시간의 FTT가격  

위 3가지 데이터를 이용하여 누적 소각 금액 등의 여타 데이터들을 만들 수 있기 때문에 3개의 데이터는 꼭 외부 어디에선가 가져와야만 했다

<br>

![ftx-ftt](/assets/images/ftx-ftt.png)

FTX 웹사이트에서는 매주 소각량에 대한 데이터가 제공된다. 이 부분의 경우 웹사이트의 네트워크 트래픽을 살펴보면 Ftx서버에 /ftt-burns라는 API를 호출하여 받아온다는 것을 찾을 수 있었다. 다행히도 FTX서버에서 해당 엔드포인트의 CORS(Cross Origin Resource Sharing - 주로 서버에서 보안적인 이유로 Origin이 다른 사이트로부터의 API요청을 막는 역할을 함)를 막아놓지 않아 우리 서버에서 해당 API를 자유롭게 호출 할 수 있었다.

<br>

![cmc-quote](/assets/images/cmc-quote.png)

Coin Market Cap에서는 공식적으로 코인에 대한 가격 및 메타 정보를 가져올 수 있는 API를 제공한다. 한 달마다 무료로 33번 API요청을 할 수 있는데 FTT모델의 경우 일주일에 1번을 요청하므로 무료로 충분히 이용할 수 있다.

<br>

![mongo-quote](/assets/images/mongo-quote.png)

해당 데이터를 받아와서 필요한 부분을 정제하여 데이터 베이스에 저장할 수 있었다.

<br>

### 회기 분석 모델 만들기

엑셀에서 보이는 모델의 경우 엑셀의 자체 기능으로 계산된 것이다. 윈도우 버전의 엑셀에서는 [Forcast Sheet](https://support.microsoft.com/en-us/office/create-a-forecast-in-excel-for-windows-22c500da-6da7-45e5-bfdc-60a7062329fd)라는 기능을 제공한다. 이 기능은 엑셀에 인풋과 아웃풋을 넣으면 해당 데이터를 토대로 다항 회기 분석을 해주는 기능이다. 이 기능은 기존의 엑셀 파일에서 데이터를 넣은 뒤 차트를 그릴 때 사용되었다.

문제는 엑셀 내부의 기능이기 때문에 외부에서 사용할 수 없다는 점이었다. 따라서 다항 회기 분석을 할 수 있는 툴을 만들어야 했다. 다음 2개의 레퍼런스를 통해 다항 회기 분석을 하는 법에 대해 학습하였다.
- [다항 회기 분석](https://www.youtube.com/watch?v=nGcMl03LPC0)
- [다항 회기 분석을 할 때 차수를 결정하는 방법](https://youtu.be/-BR4WElPIXg)

다항 회기 분석을 하는 함수는 따로 구현하였으며 다른 곳에서도 재 사용될 수 있도록 [pkg.go.dev](https://pkg.go.dev)(Go 언어에서 사용할 수 있는 패키지를 다운로드 할 수 있는 사이트)에 업로드 하였다.
- [pregression](https://pkg.go.dev/github.com/cocm1324/pregression)

<br>


### Go 언어 스터디 및 서버 구현

### FrontEnd 뷰 구성

### Github Action의 구성


## 결과


## 결론